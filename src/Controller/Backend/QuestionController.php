<?php

namespace App\Controller\Backend;

use App\Entity\User;
use App\Entity\Answer;
use App\Entity\Question;
use App\Form\QuestionType;
use App\Repository\QuestionRepository;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;

/**
 * @Route("backend/question",  name="backend_")
 */
class QuestionController extends AbstractController
{
    /**
     * @Route("/", name="question_index", methods={"GET"})
     */
    public function index(QuestionRepository $questionRepository): Response


    {

        $user = new User();
        return $this->render('faq/index.html.twig', ['questions' => $questionRepository->findAll()]);
    }
    /**
     * @Route("/new", name="question_new", methods={"GET","POST"})
     */
    public function new(Request $request): Response
    {
        $question = new Question();
        $form = $this->createForm(QuestionType::class, $question);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($question);
            $entityManager->flush();
            $this->addFlash(
                'success',
                'Enregistrement effectuÃ©'
            );
            
            return $this->redirectToRoute('backend_question_index');
        }
        return $this->render('backend/question/new.html.twig', [
            'question' => $question,
            'form' => $form->createView(),
        ]);
    }
    /**
     * @Route("/{id}", name="question_show", methods={"GET"}, requirements={"id"="\d+"})
     */
    public function show(Question $question = null): Response
    {
        $anwer = new Answer();
        if (!$question) {
            throw $this->createNotFoundException('Question introuvable');
        }
        return $this->render('backend/question/show.html.twig', ['question' => $question]);
    }
    
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}